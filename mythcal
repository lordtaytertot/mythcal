#! /usr/bin/python3

# mythcal

# Copyright 2009-2022 Richard Fearn
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""mythcal - synchronizes your MythTV recording schedule to a Google calendar"""

import configparser
import argparse
from datetime import datetime
import pickle
import os
import sys
import queue
from functools import partial
from operator import attrgetter
import threading
import time
import webbrowser
from collections import namedtuple
import logging
from http.server import BaseHTTPRequestHandler, ThreadingHTTPServer
from urllib.parse import urlparse, parse_qs

from MythTV import MythBE
import pytz
from oauth2client.client import OAuth2WebServerFlow
from oauth2client.file import Storage
import httplib2
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

CONFIG_FILE = "mythcal.conf"

CONFIG_CALENDAR_SECTION = "calendar"
CALENDAR_ID_OPTION = "id"

CACHE_FILE = "mythcal.cache"
CREDENTIALS_FILE = "mythcal.credentials"

VERSION = "32.0"

# From https://developers.google.com/accounts/docs/OAuth2:
#     "...a client secret, which you embed in the source code of your
#     application. (In this context, the client secret is obviously not treated
#     as a secret.)"
OAUTH_CLIENT_ID = '17959633059-62g87ggkkr0a1lub43egv3rgfp7afphq.apps.googleusercontent.com'
OAUTH_CLIENT_SECRET = 'wlkk_7uk8La2Ceqp9OY49qSH'

OAUTH_SCOPE = 'https://www.googleapis.com/auth/calendar.app.created'

AUTH_COMPLETE_BROWSER_MESSAGE = \
    "Authorization completed successfully. " \
    "You may now close this tab and continue in the terminal."

AUTH_COMPLETE_TERMINAL_MESSAGE = "Done! You can now run mythcal without the `--auth` flag."

DATE_FORMAT = "%Y-%m-%d"
DATE_TIME_FORMAT = "%Y-%m-%dT%H:%M:%S.000%z"


Programme = namedtuple("Programme", ["title", "subtitle", "channel", "start", "end", "description"])

Recordings = namedtuple("Recordings", ["current", "future"])


LOGGING_FORMAT = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
logging.basicConfig(format=LOGGING_FORMAT)


class Mythcal:
    """Main mythcal class"""

    def __init__(self):
        self.logger = logging.getLogger("Mythcal")
        self.config = None
        self.calendar_id = None
        self.options = None
        self.service = None

    @staticmethod
    def convert_mythtv_datetime_to_timestamp(mythtv_datetime):
        """Converts a MythTV datetime to a UNIX timestamp"""
        naive_datetime = mythtv_datetime.asnaiveutc()
        python_datetime = datetime(naive_datetime.year, naive_datetime.month, naive_datetime.day,
                                   naive_datetime.hour, naive_datetime.minute,
                                   tzinfo=pytz.utc)
        timestamp = int(python_datetime.timestamp())
        return timestamp

    @staticmethod
    def convert_program(prog):
        """Converts a MythTV Program object to an instance of Programme"""
        return Programme(
            title=prog.title,
            subtitle=prog.subtitle,
            channel=prog.channame,
            start=Mythcal.convert_mythtv_datetime_to_timestamp(prog.starttime),
            end=Mythcal.convert_mythtv_datetime_to_timestamp(prog.endtime),
            description=prog.description,
        )

    def get_recordings_from_backend(self):
        """Gets current and upcoming recordings from MythTV"""

        self.logger.debug("Getting recordings from MythTV backend...")

        mythtv = MythBE()

        upcoming = mythtv.getUpcomingRecordings()  # pylint: disable=no-value-for-parameter
        upcoming = list(upcoming)  # convert listiterator to list

        self.logger.debug("    found %d upcoming recording(s)", len(upcoming))

        upcoming = [Mythcal.convert_program(p) for p in upcoming]
        upcoming.sort(key=attrgetter("start"))

        current = []
        for recorder in mythtv.getRecorderList():
            if mythtv.isRecording(recorder):
                prog = mythtv.getCurrentRecording(recorder)
                # don't include live programmes (issue 16)
                if prog.get("recgroup") != "LiveTV":
                    current.append(prog)

        self.logger.debug("    found %d current recording(s)", len(current))

        current = [Mythcal.convert_program(p) for p in current]
        current.sort(key=attrgetter("start"))

        return Recordings(current=current, future=upcoming)

    def delete_existing_events(self):
        """Deletes all events from the calendar"""

        self.logger.debug("Deleting existing entries...")

        token = None
        keep_going = True

        while keep_going:

            result = self.service.events().list(
                calendarId=self.calendar_id, eventTypes="default", pageToken=token).execute()

            for item in result["items"]:

                self.logger.debug("    will delete \"%s\"", item["summary"])

                if not self.options.dry_run:
                    self.service.events().delete(calendarId=self.calendar_id, eventId=item["id"]).execute()

            if "nextPageToken" in result:
                token = result["nextPageToken"]
            else:
                keep_going = False

        self.logger.debug("Existing entries deleted.")

    @staticmethod
    def create_all_day_event(title, start, end, content=None):
        """Creates an all-day event"""

        event = {
            "summary": title,
            "start": {
                "date": time.strftime(DATE_FORMAT, start),
            },
            "end": {
                "date": time.strftime(DATE_FORMAT, end),
            },
            "description": content
        }
        return event

    @staticmethod
    def create_programme_event(prog):
        """Creates an event for one MythTV recording"""

        if prog.subtitle:
            event_title = "%s: %s (%s)" % (prog.title, prog.subtitle, prog.channel)
        else:
            event_title = "%s (%s)" % (prog.title, prog.channel)

        event = {
            "summary": event_title,
            "start": {
                "dateTime": datetime.fromtimestamp(prog.start, tz=pytz.utc).strftime(DATE_TIME_FORMAT),
            },
            "end": {
                "dateTime": datetime.fromtimestamp(prog.end, tz=pytz.utc).strftime(DATE_TIME_FORMAT),
            },
            "description": prog.description
        }

        return event

    def main(self):
        """Main mythcal entry point"""

        self.read_config()
        self.parse_args()

        if self.options.version:
            print("mythcal %s" % VERSION)

        elif self.options.auth:
            self.auth()

        else:
            self.sync()

    def read_config(self):
        """Reads the user's mythcal configuration from their config file"""

        self.config = configparser.RawConfigParser()
        self.config.read(CONFIG_FILE, encoding="utf-8")

    def write_config(self):
        """Writes the user's mythcal configuration to their config file"""

        with open(CONFIG_FILE, "w", encoding="utf-8") as config_file:
            self.config.write(config_file)

    def parse_args(self):
        """Parse command-line arguments"""

        parser = argparse.ArgumentParser()

        parser.add_argument("-a", "--auth", action="store_true", dest="auth",
                            help="authenticate (required before using mythcal for the first time)")

        parser.add_argument("-n", "--dry-run", action="store_true", dest="dry_run",
                            help="perform a trial run; don't make any changes (implies -v)")

        parser.add_argument("-V", "--version", action="store_true", dest="version",
                            help="show version and exit")

        parser.add_argument("-v", "--verbose", action="store_true", dest="verbose",
                            help="increase verbosity")

        self.options = parser.parse_args()

        if self.options.dry_run:
            self.options.verbose = True

        if self.options.verbose:
            self.logger.setLevel(logging.DEBUG)

    def sync(self):
        """Synchronizes MythTV recordings with the Google calendar"""

        # check for existence of credentials
        if not os.path.isfile(CREDENTIALS_FILE):
            print("mythcal: no credentials file. You need to run `mythcal --auth` first", file=sys.stderr)
            sys.exit(1)

        self.create_calendar_service()
        self.check_calendar()

        # get recordings from MythTV backend
        recordings = self.get_recordings_from_backend()

        # load recording list from last time
        last_recordings = self.read_cache()

        # update calendar, and output new recording list, if different
        if recordings != last_recordings:

            self.delete_existing_events()
            self.add_events(recordings)
            self.update_cache(recordings)

        else:
            self.logger.debug("Recordings have not changed; not updating calendar.")

        self.logger.debug("Finished.")

    def read_cache(self):
        """Reads the cache file"""

        if os.path.exists(CACHE_FILE):

            self.logger.debug("Reading cache file...")

            with open(CACHE_FILE, "rb") as cache_file:
                last_recordings = pickle.load(cache_file)

            self.logger.debug("Done.")

            return last_recordings

        self.logger.debug("Cache file does not exist.")

        return None

    def create_calendar_service(self):
        """Gets the calendar service and logs in"""

        self.logger.debug("Logging into Google Calendar...")

        storage = Storage(CREDENTIALS_FILE)
        credentials = storage.get()

        http = httplib2.Http()
        http = credentials.authorize(http)

        # cache_discovery=False prevents a warning being logged by the Google API Client:
        #   "file_cache is unavailable when using oauth2client >= 4.0.0 or google-auth"
        self.service = build("calendar", "v3", http=http, cache_discovery=False)

        self.logger.debug("Done.")

    def check_calendar(self):
        """Attempts to get the mythcal calendar. Creates a new calendar if required"""

        if not self.config.has_section(CONFIG_CALENDAR_SECTION):
            self.config.add_section(CONFIG_CALENDAR_SECTION)
            self.write_config()

        if not self.config.has_option(CONFIG_CALENDAR_SECTION, CALENDAR_ID_OPTION):
            self.logger.debug("No calendar defined; creating a new one...")

            calendar = {
                "summary": "MythTV",
                "description": "Upcoming MythTV recordings",
            }

            new_calendar = self.service.calendars().insert(body=calendar).execute()

            self.config.set(CONFIG_CALENDAR_SECTION, CALENDAR_ID_OPTION, new_calendar["id"])
            self.write_config()

        self.calendar_id = self.config.get(CONFIG_CALENDAR_SECTION, CALENDAR_ID_OPTION)

        self.logger.debug("Getting calendar...")

        try:
            self.service.calendars().get(calendarId=self.calendar_id).execute()
        except HttpError as ex:
            self.logger.error("Could not get calendar with ID '%s'", self.calendar_id, exc_info=True)
            self.logger.error("API response: %s", ex.content)
            print("mythcal: could not get calendar with ID '%s'" % self.calendar_id, file=sys.stderr)
            sys.exit(1)

        self.logger.debug("Done.")

    def add_events(self, recordings):
        """Adds new events to the calendar"""

        self.logger.debug("Adding new entries...")

        self.add_programme_events(recordings)
        self.add_last_updated_event(recordings)

        self.logger.debug("New entries added.")

    def add_programme_events(self, recordings):
        """Adds an event for current/future recordings"""

        for prog in recordings.current + recordings.future:

            self.logger.debug("    will add \"%s\"", prog.title)

            if not self.options.dry_run:
                event = self.create_programme_event(prog)
                self.service.events().insert(calendarId=self.calendar_id, body=event).execute()

    def add_last_updated_event(self, recordings):
        """Adds the 'last updated' event"""

        last_update_text = "MythTV updated %s" % time.strftime("%H:%M", time.localtime())

        description = ""

        if recordings.current:
            description += "Now recording:\n"
            for prog in recordings.current:
                description += "    %s (%s)\n" % (prog.title, prog.channel)
        else:
            description += "Not currently recording.\n"

        description += "\n"

        if recordings.future:
            prog = recordings.future[0]
            description += "Next recording:\n    %s (%s, %s)" % (
                prog.title, prog.channel, datetime.fromtimestamp(prog.start).strftime("%H:%M, %a %d %b"))
        else:
            description += "No future recordings scheduled.\n"

        self.logger.debug("    will add \"%s\"", last_update_text)

        if not self.options.dry_run:
            event = self.create_all_day_event(title=last_update_text, start=time.gmtime(),
                                              end=time.gmtime(time.time() + 24*60*60), content=description)
            self.service.events().insert(calendarId=self.calendar_id, body=event).execute()

    def update_cache(self, recordings):
        """Updates the cache file"""

        self.logger.debug("Updating cache...")

        if not self.options.dry_run:
            with open(CACHE_FILE, "wb") as cache_file:
                pickle.dump(recordings, cache_file)

        self.logger.debug("Done.")

    @staticmethod
    def auth():
        """Guides the user through the process of allowing mythcal to access their Google calendar"""

        code_queue = queue.Queue()

        # Based on https://stackoverflow.com/a/52046062/200609
        request_handler = partial(MythcalHttpRequestHandler, code_queue)

        web_server = ThreadingHTTPServer(('', 0), request_handler)
        http_server_thread = threading.Thread(target=web_server.serve_forever, daemon=True)
        http_server_thread.start()

        redirect_uri = "http://%s:%d/code" % ("localhost", web_server.server_port)

        flow = OAuth2WebServerFlow(
            client_id=OAUTH_CLIENT_ID,
            client_secret=OAUTH_CLIENT_SECRET,
            scope=OAUTH_SCOPE,
            redirect_uri=redirect_uri
        )

        auth_uri = flow.step1_get_authorize_url()
        print("Opening %s" % auth_uri)
        webbrowser.open(auth_uri)

        auth_code = code_queue.get()

        web_server.shutdown()

        credentials = flow.step2_exchange(auth_code)
        storage = Storage(CREDENTIALS_FILE)
        storage.put(credentials)
        print(AUTH_COMPLETE_TERMINAL_MESSAGE)


class MythcalHttpRequestHandler(BaseHTTPRequestHandler):
    """Request handler for mythcal authorization HTTP server"""

    def __init__(self, code_queue, *args, **kwargs):
        self.code_queue = code_queue
        super().__init__(*args, **kwargs)

    def do_GET(self):  # pylint: disable=invalid-name
        """Handles a GET request to the mythcal authorization HTTP server"""

        parse_result = urlparse(self.path)

        if parse_result.path != "/code":
            self.send_error(404, "Not found")
            return

        query = parse_qs(parse_result.query)

        if "code" not in query:
            self.send_error(400, "Bad request")
            return

        auth_code = query["code"][0]
        self.code_queue.put(auth_code)

        self.send_response(200)
        self.send_header('Content-Type', 'text/plain')
        self.end_headers()
        self.wfile.write(AUTH_COMPLETE_BROWSER_MESSAGE.encode('utf8'))


if __name__ == '__main__':
    try:
        Mythcal().main()
    except KeyboardInterrupt:
        pass
