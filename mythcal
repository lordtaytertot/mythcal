#! /usr/bin/python3

# mythcal

# Copyright 2009-2020 Richard Fearn
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""mythcal - synchronizes your MythTV recording schedule to a Google calendar"""

import configparser
import argparse
from datetime import datetime
import pickle
import os
import sys
from operator import itemgetter
import time

from MythTV import MythBE
import pytz
from oauth2client.client import OAuth2WebServerFlow
from oauth2client.file import Storage
import httplib2
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

CONFIG_FILE = "mythcal.conf"
CACHE_FILE = "mythcal.cache"
CREDENTIALS_FILE = "mythcal.credentials"

VERSION = "0.27.0"

# From https://developers.google.com/accounts/docs/OAuth2:
#     "...a client secret, which you embed in the source code of your
#     application. (In this context, the client secret is obviously not treated
#     as a secret.)"
OAUTH_CLIENT_ID = '17959633059-62g87ggkkr0a1lub43egv3rgfp7afphq.apps.googleusercontent.com'
OAUTH_CLIENT_SECRET = 'wlkk_7uk8La2Ceqp9OY49qSH'
OAUTH_SCOPE = 'https://www.googleapis.com/auth/calendar'
OAUTH_REDIRECT_URI = 'urn:ietf:wg:oauth:2.0:oob'

AUTH_MESSAGE_1 = """Visit this URL in your browser:

  %s

When you have granted mythcal access to your calendar, enter the code you are
given below.
"""

AUTH_MESSAGE_2 = "Done! You can now run mythcal without the `--auth` flag."

DATE_FORMAT = "%Y-%m-%d"
DATE_TIME_FORMAT = "%Y-%m-%dT%H:%M:%S.000%z"


class Mythcal:
    """Main mythcal class"""

    def __init__(self):
        self.calendar_id = None
        self.options = None
        self.service = None

    @staticmethod
    def convert_mythtv_datetime_to_timestamp(mythtv_datetime):
        """Converts a MythTV datetime to a UNIX timestamp"""
        naive_datetime = mythtv_datetime.asnaiveutc()
        python_datetime = datetime(naive_datetime.year, naive_datetime.month, naive_datetime.day,
                                   naive_datetime.hour, naive_datetime.minute,
                                   tzinfo=pytz.utc)
        timestamp = int(python_datetime.timestamp())
        return timestamp

    @staticmethod
    def convert_program(prog):
        """Converts a MythTV Program object to a dictionary"""
        return {
            "title": prog.title,
            "subtitle": prog.subtitle,
            "channel": prog.channame,
            "start": Mythcal.convert_mythtv_datetime_to_timestamp(prog.starttime),
            "end": Mythcal.convert_mythtv_datetime_to_timestamp(prog.endtime),
            "description": prog.description
        }

    def get_recordings_from_backend(self):
        """Gets current and upcoming recordings from MythTV"""

        if self.options.verbose:
            print("Getting recordings from MythTV backend...")

        mythtv = MythBE()

        upcoming = mythtv.getUpcomingRecordings()  # pylint: disable=no-value-for-parameter
        upcoming = list(upcoming)  # convert listiterator to list

        if self.options.verbose:
            print("    found %d upcoming recording(s)" % len(upcoming))

        upcoming = [Mythcal.convert_program(p) for p in upcoming]
        upcoming.sort(key=itemgetter("start"))

        current = []
        for recorder in mythtv.getRecorderList():
            # str(...) required due to MythTV issue #7648
            # see http://svn.mythtv.org/trac/ticket/7648
            if mythtv.isRecording(str(recorder)):
                prog = mythtv.getCurrentRecording(str(recorder))
                # don't include live programmes (issue 16)
                if prog.get("recgroup") != "LiveTV":
                    current.append(prog)
        if self.options.verbose:
            print("    found %d current recording(s)" % len(current))

        current = [Mythcal.convert_program(p) for p in current]
        current.sort(key=itemgetter("start"))

        return {"current": current, "future": upcoming}

    def delete_existing_events(self):
        """Deletes all events from the calendar"""

        if self.options.verbose:
            print("Deleting existing entries...")
        result = self.service.events().list(calendarId=self.calendar_id).execute()
        while result:
            for item in result["items"]:
                if self.options.verbose:
                    print("    will delete \"%s\"" % item["summary"])
                if not self.options.dry_run:
                    self.service.events().delete(calendarId=self.calendar_id, eventId=item["id"]).execute()
            if "nextPageToken" in result:
                token = result["nextPageToken"]
                result = self.service.events().list(calendarId=self.calendar_id, pageToken=token).execute()
            else:
                result = None
        if self.options.verbose:
            print("Existing entries deleted.")

    @staticmethod
    def create_all_day_event(title, start, end, content=None):
        """Creates an all-day event"""
        event = {
            "summary": title,
            "start": {
                "date": time.strftime(DATE_FORMAT, start),
            },
            "end": {
                "date": time.strftime(DATE_FORMAT, end),
            },
            "description": content
        }
        return event

    @staticmethod
    def create_programme_event(prog):
        """Creates an event for one MythTV recording"""
        if prog["subtitle"]:
            event_title = "%s: %s (%s)" % (prog["title"], prog["subtitle"], prog["channel"])
        else:
            event_title = "%s (%s)" % (prog["title"], prog["channel"])
        event = {
            "summary": event_title,
            "start": {
                "dateTime": datetime.fromtimestamp(prog["start"], tz=pytz.utc).strftime(DATE_TIME_FORMAT),
            },
            "end": {
                "dateTime": datetime.fromtimestamp(prog["end"], tz=pytz.utc).strftime(DATE_TIME_FORMAT),
            },
            "description": prog["description"]
        }
        return event

    def main(self):
        """Main mythcal entry point"""

        config = configparser.RawConfigParser()
        config.read(CONFIG_FILE)

        self.calendar_id = config.get("calendar", "id")

        parser = argparse.ArgumentParser()
        parser.add_argument("-a", "--auth", action="store_true", dest="auth",
                            help="authenticate (required before using mythcal for the first time)")
        parser.add_argument("-n", "--dry-run", action="store_true", dest="dry_run",
                            help="perform a trial run; don't make any changes (implies -v)")
        parser.add_argument("-V", "--version", action="store_true", dest="version",
                            help="show version and exit")
        parser.add_argument("-v", "--verbose", action="store_true", dest="verbose",
                            help="increase verbosity")
        self.options = parser.parse_args()

        if self.options.version:
            print("mythcal %s" % VERSION)
            sys.exit(0)

        if self.options.dry_run:
            self.options.verbose = True

        if self.options.auth:
            self.auth()

        # check for existence of credentials
        if not os.path.isfile(CREDENTIALS_FILE):
            print("mythcal: no credentials file. You need to run `mythcal --auth` first", file=sys.stderr)
            sys.exit(1)

        # get recordings from MythTV backend
        recordings = self.get_recordings_from_backend()

        # load recording list from last time
        last_recordings = None
        if os.path.exists(CACHE_FILE):
            if self.options.verbose:
                print("Reading cache file...")
            cache_file = open(CACHE_FILE, "rb")
            last_recordings = pickle.load(cache_file)
            cache_file.close()
            if self.options.verbose:
                print("Done.")
        else:
            if self.options.verbose:
                print("Cache file does not exist.")

        # update calendar, and output new recording list, if different
        if recordings != last_recordings:

            # get calendar service and log in
            if self.options.verbose:
                print("Logging into Google Calendar...")
            storage = Storage(CREDENTIALS_FILE)
            credentials = storage.get()
            http = httplib2.Http()
            http = credentials.authorize(http)
            self.service = build("calendar", "v3", http=http)
            if self.options.verbose:
                print("Done.")

            # Get all calendars
            if self.options.verbose:
                print("Getting calendar...")
            try:
                self.service.calendars().get(calendarId=self.calendar_id).execute()
            except HttpError as ex:
                print("mythcal: could not get calendar with id '%s':" % self.calendar_id, file=sys.stderr)
                print(ex.content, file=sys.stderr)
                sys.exit(1)
            if self.options.verbose:
                print("Done.")

            self.delete_existing_events()

            if self.options.verbose:
                print("Adding new entries...")

            # add an event for current/future recordings
            for prog in recordings["current"] + recordings["future"]:
                if self.options.verbose:
                    print("    will add \"%s\"" % prog["title"])
                if not self.options.dry_run:
                    event = self.create_programme_event(prog)
                    self.service.events().insert(calendarId=self.calendar_id, body=event).execute()

            # add 'last updated' event
            last_update_text = "MythTV updated %s" % time.strftime("%H:%M", time.localtime())
            description = ""
            if recordings["current"]:
                description += "Now recording:\n"
                for prog in recordings["current"]:
                    description += "    %s (%s)\n" % (prog["title"], prog["channel"])
            else:
                description += "Not currently recording.\n"
            description += "\n"
            if recordings["future"]:
                prog = recordings["future"][0]
                description += "Next recording:\n    %s (%s, %s)" % (
                    prog["title"], prog["channel"], datetime.fromtimestamp(prog["start"]).strftime("%H:%M, %a %d %b"))
            else:
                description += "No future recordings scheduled.\n"
            if self.options.verbose:
                print("    will add \"%s\"" % last_update_text)
            if not self.options.dry_run:
                event = self.create_all_day_event(title=last_update_text, start=time.gmtime(),
                                                  end=time.gmtime(time.time() + 24*60*60), content=description)
                self.service.events().insert(calendarId=self.calendar_id, body=event).execute()

            if self.options.verbose:
                print("New entries added.")

            # update last recording list
            if self.options.verbose:
                print("Updating cache...")
            if not self.options.dry_run:
                cache_file = open(CACHE_FILE, "wb")
                pickle.dump(recordings, cache_file)
                cache_file.close()

            if self.options.verbose:
                print("Done.")

        else:
            if self.options.verbose:
                print("Recordings have not changed; not updating calendar.")

        if self.options.verbose:
            print("Finished.")

    @staticmethod
    def auth():
        """Guides the user through the process of allowing mythcal to access their Google calendar"""

        flow = OAuth2WebServerFlow(
            client_id=OAUTH_CLIENT_ID,
            client_secret=OAUTH_CLIENT_SECRET,
            scope=OAUTH_SCOPE,
            redirect_uri=OAUTH_REDIRECT_URI
        )

        auth_uri = flow.step1_get_authorize_url()
        print(AUTH_MESSAGE_1 % auth_uri)

        auth_code = input("Code: ")
        print()

        credentials = flow.step2_exchange(auth_code)
        storage = Storage(CREDENTIALS_FILE)
        storage.put(credentials)
        print(AUTH_MESSAGE_2)
        sys.exit(0)


if __name__ == '__main__':
    Mythcal().main()
